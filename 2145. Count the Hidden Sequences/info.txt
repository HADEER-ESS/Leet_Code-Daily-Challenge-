- Difficulty : Medium
- Topic : Array, Prefic Sum

- Intuition : 
    - get **MAX** for counting
    - get **ANS** marked as prefix-sum accumulate number

- Approach : 
    - create **left** as a pointer in *differences* array
    - **max** to store the maximum number in created array
    - **start** as a remarkable to get the last available lower number.
    - **ans** will store the last number can be available 

    - loop through **differences** array using pointer **left** to count **sum**
        - if **sum** greater than **upper** => return 0
        - if it is between **lower** and **upper** =>
            - update **ans** value
            - increment **left** pointer
            - get the **max** between **sum** and *max*
        - else =>
            - start from beginning 
            - increment **start** for *lower* marked
            - reset **ans**
            - reset **max** to get the maximum number in new set

    - **max** refere to the maximum number in the smallest *set* 
        that can form the *differences* array
    - each time we need to increment **max** by one untill it reach **upper** 
        value, so => **upper - max + 1** add one for the first *set* where the first **max** from.

- Complexity :
    -Time complexity : O(n)
    - Space complexity : O(1)