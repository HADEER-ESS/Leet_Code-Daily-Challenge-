- Difficulty : Hard
- Topic : Math, Hash Table, BackTracking, Combinatorics, Enumeration

- Intuition : 
    - divide problem into small shunk.

    - create function to calculate the factorial for n => factorial.

    - create function to genarate all possible palindrom numbers can be created with
      length n and divisible by k => genarateNumbers.

    - create a function to rearrange the numbers, and calculate all possible number can
      be created with n length and not have leading zeros using factorial function output => permutations.

- Approach : (look at SCREEN-SHOT)
    - pass n and k to get all possible K-palindromic numbers with length of n using mirros by creating the only half of the string and copy its mirror side.

    - the function genarateNumbers return Array stored in res variable.

    - genarate arr dp to store the factorial for each number, that will be used to count the possible rearrange can occure on the string number stored in arr variable.

    - the max Factorial number can be genarated will be n

    - create a SET most important section to avoid doublicate of appearcne for each number and avid OVER-COUNT called st.

    - when looping through res array to count all possiblities of rearrange, we first

        1- split string, resort, and rejoin together, and check if number is already exist in st set.
        2- if exist => continue
        3- if not => calculate the possiblities by passing string to permutations function
        4- add the sorted-joined string in set st
           permutations function count each digit appearcne to check:

            - if it includes 0 we will exclude some results that will have leading zeros, by =>

                - 1-decrement 0 count by one.
                - 2-decrement n count by one.
                - 3-minus the result from the result before those decremented (origin).
    - add the retuned number to ans

    - return ans

- Complexity :
    -Time complexity : O(log n)
    - Space complexity : O(1)


