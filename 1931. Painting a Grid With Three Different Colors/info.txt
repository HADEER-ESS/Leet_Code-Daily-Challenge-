- Difficulty : Hard
- Topic : Dynamic Programming, Back Track, Matrix, Array, Count

- Intuition : 
    - count all possible matrix can be formed from 3 colors
    - there is no adjacent box has same color

- Approach : 
    - create a separated function :
        - CheckRows => take two array of integers represent rows to prevent create two adjacent box color to be acceted vertically
        - genarateRow(m) => genarate rows box color using **back-track** algorithm represent **COLORS** as three 
           integers (0,1,2), return array of array of boxs color.

    - create **transitions || compatible** variable to store for every index what the row can be combatiable 
      with it to avoid two adjacent cell with same color.

    - create a **dp** variable to count aviable compatible col starting from **1** as a first col anything will be fine.

    - sum all counts in **dp** and return the value.

- Complexity :
    -Time complexity : O((N+M)* 4^M)
    - Space complexity : O(4^m)